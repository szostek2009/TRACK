{
    "_comment": "https://confluence/display/TRAC/Web+UI+Development+and+Architecture+Skills",

    "type": "Web UI Engineering",
    "version": "2.0.0",

    "id": "",
    "name": "",
    "updated": "",

    "sections": {
        "Languages and Concepts": {
            "competencies": {
                "L1": {
                    "category": "Skill",
                    "competency": "Writes maintainable and modular code.",
                    "examples": {
                        "0": "Can write code and complete issues with oversight from more experienced engineers.",
                        "1": "Implements quickly and correctly. Demonstrates regular, incremental, and visible progress. Avoids coupling and over-architecting. May require oversight on more complicated features.",
                        "2": "Can be trusted to build features in a well-architected and modular manner without oversight. Comments their code well and writes software with flexibility and users in mind.",
                        "3": "Has built the UI for applications from the ground up (on your team or in an open source project) or written large-scale libraries using best practices. Writes thoughtful code that takes user experience into account and considers code readability and comprehension a priority."
                    },
                    "rating": "",
                    "comment": ""
                },
                "L2": {
                    "category": "Skill",
                    "competency": "Uses Responsive Web Design to build flexible applications.",
                    "examples": {
                        "0": "Understands the benefits of Responsive Web Design and can build new features and pages that adapt to the breakpoints set in the application.",
                        "1": "Builds features using the mobile-first and content-first approaches to Responsive Web Design.",
                        "2": "Combines advanced CSS features and/or JavaScript with Responsive Web Design techniques to provide different layouts and features at different screen sizes (e.g. flexbox, css grids, off-canvas techniques, responsive tables, etc.).",
                        "3": "Uses advanced Responsive Web Design techniques when appropriate (e.g. responsive images, responsive typography, element queries, feature queries, etc.)."
                    },
                    "rating": "",
                    "comment": ""
                },
                "L3": {
                    "category": "Skill",
                    "competency": "Uses semantic markup and templating systems.",
                    "examples": {
                        "0": "Has very little understanding of semantics and uses existing markup and templates to complete tasks.",
                        "1": "Has a basic understanding of semantics and why they matter and chooses the appropriate HTML elements when marking up a document. Has experience using their application's templating system to create reusable and DRY html.",
                        "2": "Can choose between several appropriate HTML elements when marking up a document. Has experience with advanced features of their application's templating system.",
                        "3": "Has advanced knowledge of their application's templating system and can extend it."
                    },
                    "rating": "",
                    "comment": ""
                },
                "L4": {
                    "category": "Knowledge",
                    "competency": "Understands CSS architectural principles (e.g. OOCSS, BEM, Functional/Atomic, CSS Modules, ITCSS, etc.)",
                    "examples": {
                        "0": "Is unaware of what CSS architectural principles are being used in their application and how it affects how CSS and HTML are written.",
                        "1": "Is aware of what CSS architectural principles are being used in their application and how it affects how CSS and HTML are written. Understands how to write new CSS and HTML that conforms to the principles being used.",
                        "2": "Is aware of multiple CSS architectural principles and understands how to use more than one on various projects (e.g. Uses Functional CSS on current project, but used BEM previously.) Understands the overlap between some principles.",
                        "3": "Is familiar with multiple CSS architectural principles and knows when and how to use them effectively. Knows when one principle might be better than another for a project, even if it is not their first choice. Understands when some principles are complimentary and can be used in conjunction."
                    },
                    "rating": "",
                    "comment": ""
                },
                "L5": {
                    "category": "Skill",
                    "competency": "Writes Javascript to add interaction to applications.",

                    "examples": {
                        "0": "Knows enough JavaScript or jQuery to do minor interaction tasks (e.g. showing and hiding form fields based on other actions, making a tabbed interface, etc). Doesn't have a strong grasp of the language, but can get things done. Can use plugins.",
                        "1": "Is comfortable writing JavaScript and understands the language at an intermediate level (understands closures, hoisting, prototypal inheritance, scope, etc.). Can write plugins or sharable modules/components. Is learning the latest ECMAScript standard.",
                        "2": "Is comfortable writing JavaScript and understands the language at an expert level (understands MVC/MV* patterns, data binding, state management, component design). Writes client-side JavaScript applications (possibly using frameworks like React or Angular). Is comfortable writing JavaScript to the latest ECMAScript standard.",
                        "3": "Is comfortable writing JavaScript outside of the DOM context (NodeJS, service worker, APIs)."
                    },
                    "rating": "",
                    "comment": ""
                },
                "L6": {
                    "category": "Knowledge",
                    "competency": "Understands object-oriented programming paradigms and patterns.",

                    "examples": {
                        "0": "Knows what OOP is and the differences between OOP and other paradigms such as functional or procedural programming.",
                        "1": "Understands and is familiar with basic OOP fundamentals such as objects, inheritance, data modeling and relationships. Knows all SOLID principles.",
                        "2": "Understands OOP and more advanced topics such as domain driven design, composition, and the law of demeter. Familiar with SOLID, GRASP, and many other design patterns such as factories, repositories, facades, decorators, etc and has used them when developing.",
                        "3": "Has in depth knowledge of most OOP design patterns and has built or managed large-scale software using them."
                    },
                    "rating": "",
                    "comment": ""
                },
                "L7": {
                    "category": "Behavior",
                    "competency": "Understands functional programming paradigms and patterns.",

                    "examples": {
                        "0": "Knows what FP is and the differences between FP and other paradigms such as object-oriented or procedural programming.",
                        "1": "Understands FP basics such as first-class functions, closures, immutability, and statelessness.",
                        "2": "Understands more advanced FP topics such as monads, currying, accumulators, pipelines, fold/reduce, map, etc and has used them when developing.",
                        "3": "Has deep knowledge of most functional programming design patterns and has built or managed large-scale software using them."
                    },
                    "rating": "",
                    "comment": ""
                },
                "L8": {
                    "category": "Knowledge",
                    "competency": "Understands common development principles (e.g. DRY, KISS, YAGNI).",
                    "references": {
                        "Wikipedia: Software Development Philosophies": "https://en.wikipedia.org/wiki/List_of_software_development_philosophies"
                    },

                    "examples": {
                        "0": "Has heard of common software engineering principles and practices, but may lack understanding why they are important.",
                        "1": "Is aware of a few basic software development philosophies such as YAGNI, KISS and how they affect software design and development.",
                        "2": "Has a complete understanding of several software development philosophies from Wikipedia: Software Development Philosophies, and has experience using them in practice - including when ignoring them caused issues or made development more difficult.",
                        "3": "Understands many development principles and philosophies from Wikipedia: Software Development Philosophies, how they affect the process of software development and software engineering and the quality of software - including when they are important to follow and when there may be reason to ignore or bypass them."
                    },
                    "rating": "",
                    "comment": ""
                }
            }
        },
        "Quality and Health": {
            "competencies": {
                "Q1": {
                    "category": "Knowledge",
                    "competency": "Understands potential client-side attack vectors within applications.",
                    "references": {
                        "OWASP": "https://www.owasp.org/index.php/Category:Attack",
                        "HTML5 Security": "https://www.owasp.org/index.php/HTML5_Security_Cheat_Sheet"
                    },
                    "examples": {
                        "0": "Has heard of a few common attacks such as XSS and CORS attacks but may not understand how they work.",
                        "1": "Is aware of some common attacks from OWASP such as XSS, CSRF, and offline cache poisoning and how they may be used to take advantage of an application.",
                        "2": "Familiar with OWASP's recommendations for implementing HTML5 in a secure manner.",
                        "3": "Has an in-depth understanding of most types of attack vectors and how they affect and exploit their team's applications, not just client-side. Knows how to avoid unsafe programming patterns and can guide others in best practices."
                    },
                    "rating": "",
                    "comment": ""
                },
                "Q2": {
                    "category": "Behavior",
                    "competency": "Follows performance best practices.",
                    "examples": {
                        "0": "Is aware of performance best practices and writes code that adheres to those standards.",
                        "1": "Chooses the right image formats and uses techniques for optimizing images (sprites, responsive images, compression, etc.). Optimizes HTML, CSS, and JS for more performant delivery (concatenation, minification, dead code elimination, critical path rendering, async/deferred loading etc.). Actively works to limit application dependencies and 3rd party scripts to only those critical to business need.",
                        "2": "Understands the most important metrics for performance and how to evaluate them (using dev tools, webpage test/page speed, etc.). Knows when optimization is less necessary due to diminishing returns. Knows that a best practice in HTTP may be an anti-pattern in HTTP/2.",
                        "3": "Helps define new performance processes, techniques, and metrics benchmarks used by the team and automates the processes through scripts and tooling. Researches new performance tools and best practices and enforces their use within their applications. Has experience optimizing asset delivery for HTTP and HTTP/2."
                    },
                    "rating": "",
                    "comment": ""
                },
                "Q3": {
                    "category": "Behavior",
                    "competency": "Follows established development standards (security, performance, testing, coding style).",
                    "examples": {
                        "0": "Is unaware of team or company standards or often ignores them.",
                        "1": "Is aware of company and community standards for development languages and processes. May ignore standards on occasion to ship features sooner for business partners and demands.",
                        "2": "Follows company standards and understands the importance of adhering to them. Actively seeks out senior developers if unsure on best practices and when no clear company guidelines are available.",
                        "3": "Sets an example for others in following standards and doing the right thing. Addresses NFRs and actively works to ensure compliance with company standards. Works hard to adhere to standards without cutting corners to ship sooner."
                    },
                    "rating": "",
                    "comment": ""
                },
                "Q4": {
                    "category": "Behavior",
                    "competency": "Analyzes the team's applications and fixes errors.",
                    "examples": {
                        "0": "Often needs assistance from other engineers to fix bugs or find effective solutions.",
                        "1": "Fixes simple bugs - usually from the backlog and identified by QA or other engineers.",
                        "2": "Makes fixing bugs a priority and actively works on drawing attention to them during planning. Can quickly identify and fix bugs even in code written by others.",
                        "3": "Proactively writes defensive code. Can quickly spot bugs or problematic code during code reviews. Has a deep understanding of the team's codebases and understands the importance of fixing bugs and minimizing known issues."
                    },
                    "rating": "",
                    "comment": ""
                },
                "Q5": {
                    "category": "Knowledge",
                    "competency": "Understands the various types of testing and their importance (e.g. unit, functional, acceptance, user).",
                    "examples": {
                        "0": "Familiar with some form of testing, but may not know the differences between various testing methods.",
                        "1": "Understands the differences between unit and integration testing and when they are used in the team's applications.",
                        "2": "Understands the value of multiple types of test suites for an application or software and the different scenarios they help protect against. Knows how to write most types of tests for their team's projects.",
                        "3": "Has in-depth knowledge on the various types of testing and the value they add. Understands all types of testing and what is needed to make automated test suites robust enough to cover nearly every scenario and enable continuous deployment."
                    },
                    "rating": "",
                    "comment": ""
                },
                "Q6": {
                    "category": "Behavior",
                    "competency": "Writes comprehensive tests for all code.",
                    "examples": {
                        "0": "Can write unit tests, but needs encouragement or guidance.",
                        "1": "Proactively writes unit tests or acceptance tests for their projects.",
                        "2": "Has used both TDD and BDD and has significant experience with at least one of them. Helps push the bar higher on code coverage and other testing metrics for projects they are involved in.",
                        "3": "A champion of automated testing. A proponent of high code coverage (>90%) and enforces that standard on their projects."
                    },
                    "rating": "",
                    "comment": ""
                },
                "Q7": {
                    "category": "Behavior",
                    "competency": "Uses progressive enhancement to ensure access for all users.",
                    "examples": {
                        "0": "Does not use progressive enhancement or provide any fallbacks for JavaScript code or newer CSS features.",
                        "1": "Writes fallbacks for newer CSS features. Implements JavaScript based polyfills to access unavailable CSS features.",
                        "2": "Considers how a feature will work without JavaScript enabled. Understands how to test for JavaScript features and write code for when a feature isn't present in the browser.",
                        "3": "Promotes progressive enhancement on their team and through the company. Works to help other engineers build and test resilient features."
                    },
                    "rating": "",
                    "comment": ""
                },
                "Q8": {
                    "category": "Behavior",
                    "competency": "Follows the browser support recommendation.",
                    "resources" : {
                        "Browser Support Recommendation": "https://confluence/display/IE/Browser+Support+Recommendation"
                    },
                    "examples": {
                        "0": "Is not aware of the browser support recommendation or often ignores it.",
                        "1": "Is aware of the browser support recommendation and their application's core functionality. May ignore it on occasion to ship features sooner for business partners and demands.",
                        "2": "Follows the browser support recommendation and understands the importance of identifying their application's core functionality. Actively seeks out senior engineers or architects when unsure if a feature is core functionality.",
                        "3": "Sets an example for others in following the browser support recommendation and asking if any new feature is core functionality or an enhancement. Works hard to adhere to the recommendation without cutting corners to ship sooner."
                    },
                    "rating": "",
                    "comment": ""
                }
            }
        },
        "Tooling": {
            "competencies": {
                "T1": {
                    "category": "Skill",
                    "competency": "Performs VCS management such as committing, merging, handling conflicts.",
                    "examples": {
                        "0": "Understands version control and its importance in software development. Has limited familiarity with the VCS used by the team.",
                        "1": "Can use team's version control system to perform simple functions such as commits, branches and merging. May be reliant on a GUI or non-console interface.",
                        "2": "Can perform complex functions such as rebasing, bisect, searching through vcs history, check-in locks, stashing, and partial staging. Knows the dangers of some commands and how to avoid losing data.",
                        "3": "Understands the meaning behind VCS commands and how they work. Comfortable with console or CLI. Can handle conflict resolution for any situation and recovering data when something goes wrong. Often helps others when they have a vcs-related issue."
                    },
                    "rating": "",
                    "comment": ""
                },
                "T2": {
                    "category": "Knowledge",
                    "competency": "Understands best practices for multi-person or team workflows and branch/merging strategies.",
                    "examples": {
                        "0": "May be aware of branching strategies when working within a team, but lacks understanding or experience with release management processes for promoting code to deployment environments.",
                        "1": "Is familiar with development and branching workflows used at QL and knows what is required of them as a developer. Understands the concepts of continuous integration, continuous deployment, and continuous delivery.",
                        "2": "Has an in-depth understanding of multiple development workflows such as git flow, trunk-based development, branch-based development and why some workflows may work better for certain situations. Involved in defining the workflow and improving the development and vcs integration process for their projects and team.",
                        "3": "Has experience with multiple workflows and how they work with different team sizes. Understands the trade-offs with different development strategies and how to balance between the needs of development teams and business partners for change management. Considered an expert in this domain and helps many teams across the company improve their processes and learn optimal development and vcs processes."
                    },
                    "rating": "",
                    "comment": ""
                },
                "T3": {
                    "category": "Knowledge",
                    "competency": "Understands requirements and process for compiling and building applications in their domain.",
                    "examples": {
                        "0": "Can compile and run applications built by their team in a development environment but lacks understanding of how the process works.",
                        "1": "Understands the individual commands, scripts and processes for building their applications - both for development and in a build environment for release.",
                        "2": "Has an in-depth understanding of the processes run in order to build and compile their team's projects including system requirements and dependencies. Has experience with writing scripts for automating the build process. Is aware of the differences between compiling on a dev machine and for deployment. Has experience with multiple tools for automating builds (e.g. Gulp, Grunt, NPM Scripts).",
                        "3": "Aware of specific QL processes or caveats for our enterprise environment including consideration of our staging environments and network conditions. Can quickly debug issues that arise anywhere in the toolchain. Actively works on process improvement for simpler, faster, and more reproducible builds."
                    },
                    "rating": "",
                    "comment": ""
                },
                "T4": {
                    "category": "Knowledge",
                    "competency": "Understands how to bundle client-side code.",
                    "examples": {
                        "0": "Understands the benefits of writing modular JavaScript code, but may not understand how those pieces are brought together for production. May need help adding new modules to the codebase.",
                        "1": "Understands the basics of the tools being used in their applications to bundle JavaScript modules (e.g. Webpack, Browserify, RequireJS). Can add new modules without assistance.",
                        "2": "Has an in-depth understanding of the module bundling tools used in their applications. Can extend the functionality of the bundler through plugins or other configuration.",
                        "3": "Has extensive knowledge of multiple module bundlers and their advanced features (e.g. hot module replacement, optimization, css modules, etc.)"
                    },
                    "rating": "",
                    "comment": ""
                },
                "T5": {
                    "category": "Knowledge",
                    "competency": "Understands the concepts of package and dependency management.",
                    "examples": {
                        "0": "May have basic familiarity (can install or update libraries) with one or two common package managers (NPM, Yarn, Composer, etc.).",
                        "1": "Familiar with package management and how to import both internal and external third party libraries.",
                        "2": "Understands the implications of using third party code and evaluates when to use them based on security, reliability, and community support. Has knowledge of vendoring, locked dependencies or shrinkwrapping, and verifying trust such as signing code and authorship.",
                        "3": "Has in-depth knowledge and experience with package managers and dependency management for multiple application ecosystems or languages. Understands the impact of relying on public systems or services for dependency management and what can be done to reduce risk of downtime for QL. Understands software licensing - both open source and proprietary - and their ramifications for software use."
                    },
                    "rating": "",
                    "comment": ""
                }
            }
        },
        "Integration": {
            "competencies": {
                "I1": {
                    "category": "Knowledge",
                    "competency": "Understands the value of frameworks/libraries and how to use them effectively.",
                    "examples": {
                        "0": "Aware of the frameworks used by the team but has limited experience with them.",
                        "1": "Knows the value of shared frameworks. Has used frameworks and knows how take advantage of their features to be more efficient to reduce boilerplate code and development time.",
                        "2": "Digs deeply into framework and library documentation or code and knows the frameworks and libraries used by the team's applications in great detail.",
                        "3": "Has experience comparing the features frameworks provide in order to judge which frameworks or libraries should be used by the team's applications. Works with architects and identifies opportunities to serve the QL developer community with shared code or to solve common problems across development teams."
                    },
                    "rating": "",
                    "comment": ""
                },
                "I2": {
                    "category": "Behavior",
                    "competency": "Creates and publishes reusable libraries, modules, or frameworks.",
                    "examples": {
                        "0": "Has not contributed to shared libraries, modules, or frameworks used by others.",
                        "1": "Has contributed to a library, module, or framework used by multiple projects - including those outside of their own team (e.g. Digital Pattern Library, ScalesCSS, etc.)",
                        "2": "A primary contributor to shared libraries or frameworks. Encourages others to move reusable code into separate libraries (like the DPL) for greater impact and sharing.",
                        "3": "Actively maintains large libraries, modules, or frameworks used across the company. Has great knowledge of maintaining packages and takes developer experience into account when making changes - including following consistent versioning schemes. Likely involved in the maintenance and administration of internal package repositories."
                    },
                    "rating": "",
                    "comment": ""
                },
                "I3": {
                    "category": "Behavior",
                    "competency": "Respects how code changes may affect downstream consumers.",
                    "examples": {
                        "0": "Makes changes without fully considering or testing the impact to users.",
                        "1": "Is aware of how changes may affect other parts of their application or other applications that rely on them. Tests the impact changes to code may have on other users.",
                        "2": "Writes documentation such as usage guides, changelogs and version release notes for libraries and systems they author. Minimizes breaking changes and has respect for users and consumers of their services or libraries.",
                        "3": "Takes care to present a thoughtful developer or client experience - such as simple APIs, pleasant documentation, and clear error messages. Has experience with or uses concepts such as API versioning, feature flags, semantic versioning in their systems or libraries to lessen change impact to consumers."
                    },
                    "rating": "",
                    "comment": ""
                },
                "I4": {
                    "category": "Behavior",
                    "competency": "Helps design and encourage community standards (e.g. performance, testing, coding style).",
                    "examples": {
                        "0": "Is not involved in defining community standards or shows no interest.",
                        "1": "Participates and provides feedback on standards for the development community (internally or externally).",
                        "2": "Guides discussions and drives consensus among their team or teams.",
                        "3": "A domain expert and thought leader within a development community. Helps teams and entire communities develop standards to improve their collaboration methods."
                    },
                    "rating": "",
                    "comment": ""
                }
            }
        },
        "User Experience": {
            "competencies": {
                "E1": {
                    "category": "Behavior",
                    "competency": "Builds accessible user interfaces.",
                    "examples": {
                        "0": "Understands the need for sites to be accessible to people with varying capabilities. Can write semantic HTML and is aware of common a11y issues.",
                        "1": "Follows basic accessibility (a11y) guidelines when building new features (WCAG 2.0 AA). Uses appropriate ARIA roles and landmarks when developing new features. Prioritizes cleaning up known a11y issues as part of regular development.",
                        "2": "Tests all new features with alternative inputs and assistive devices (e.g. keyboard only, mouse only, screen readers on different platforms, screen magnification, etc.)",
                        "3": "Promotes and encourages other UI engineers to do a11y testing. Works with quality engineers to establish a11y testing practices. Encourages a11y testing as part of their team's regular work cycle."
                    },
                    "rating": "",
                    "comment": ""
                },
                "E2": {
                    "category": "Behavior",
                    "competency": "Applies design thinking when building user interfaces.",
                    "resources": {
                        "Design Thinking": "https://www.interaction-design.org/literature/article/design-thinking-a-quick-overview"
                    },
                    "examples": {
                        "0": "Unfamiliar with the concept of design thinking.",
                        "1": "Experiments with possible solutions to a problem through rapid prototyping. Works with UX Specialists to test solutions and iterates over prototypes until the solution is either accepted or rejected.",
                        "2": "Considers the needs of the user before implementing a feature. Ensures that the problem being solved is the one the user is really having. Proposes multiple possible solutions once the problem is defined.",
                        "3": "Participates in the design thinking activities with UX Designers and UX Specialists (journey mapping, empathy mapping, ideation, rapid prototyping, user testing, etc.). Promotes design thinking across the enterprise."
                    },
                    "rating": "",
                    "comment": ""
                },
                "E3": {
                    "category": "Behavior",
                    "competency": "Participates in the design process.",
                    "examples": {
                        "0": "Accepts comps or wireframes from UX Design and builds them to spec. Does not actively work with UX Design to improve the user experience of a particular feature.",
                        "1": "Discusses new designs with UX Designers before implementing. Recognizes details in a design that may not translate well in a working interface (performance issues, against browser conventions, accessibility issues, too difficult to build to be practical). Prototypes new ideas to help clarify.",
                        "2": "Whiteboards with UX Designers and uses knowledge of existing systems to help design solutions. Participates in design sprints and contributes technical expertise.",
                        "3": "Works with design to establish design and development standards. Participates in design audits. Contributes to the maintenance and documentation of the design system."
                    },
                    "rating": "",
                    "comment": ""
                }
            }
        },
        "Application Stack": {
            "competencies": {
                "S1": {
                    "category": "Knowledge",
                    "competency": "Understands the browser's rendering engine.",
                    "examples": {
                        "0": "Does not understand how the browser's rendering engine works.",
                        "1": "Understands the basics of how the browser's rendering engine works.",
                        "2": "Understands the details of the browser's rendering engine flow (parsing, creating DOM and render trees, layout, and paint).",
                        "3": "Understands how optimizing code for the browser's rendering engine affects performance and knows techniques for avoiding reflows, repaints, and layout thrashing."
                    },
                    "rating": "",
                    "comment": ""
                },
                "S2": {
                    "category": "Skill",
                    "competency": "Can set up a complete local environment for a system (e.g. IDE, runtime, web servers, database).",
                    "examples": {
                        "0": "Can set up the basic technology used by the team but not a complete development environment.",
                        "1": "Can follow documentation and set up system dependencies to develop their team's applications. May need guidance from more senior engineers to help troubleshoot.",
                        "2": "Can set up development environment for all layers of the team's applications with minimal or no oversight.",
                        "3": "Defines procedure and writes documentation for set up of development environment and has in-depth knowledge of system dependencies and how to install them - including any required VMs, databases, or system tools. Actively works on process improvement and knowledge share with others."
                    },
                    "rating": "",
                    "comment": ""
                },
                "S3": {
                    "category": "Skill",
                    "competency": "Can make changes to different layers of the team's projects (e.g. user interface, design/UX, server-side, middleware, database).",
                    "examples": {
                        "0": "Makes changes to the user interface of the team's applications with html, css, and javascript. Is aware of the various technologies used within the development team's applications and how they work together.",
                        "1": "Builds prototypes to clarify user experience ideas or test the UX of new features. Is familiar with writing code for another layer of the stack and can make small changes with guidance from subject matter experts.",
                        "2": "Is familiar with writing code for 2 or more layers of the stack and can make small or medium changes with little/no guidance.",
                        "3": "Writes quality, idiomatic, well tested code for 2 or more layers of the stack. Has experience contributing to major components of the team's applications, its framework, or shared libraries."
                    },
                    "rating": "",
                    "comment": ""
                }
            }
        },
        "Vision and Growth": {
            "competencies": {
                "V1": {
                    "category": "Behavior",
                    "competency": "Avoids writing code unnecessarily by using existing internal or open source solutions.",
                    "examples": {
                        "0": "Does not seek out or investigate new libraries that may be useful to the team and increase efficiency.",
                        "1": "Knows where to find available internal or external (open source) packages that are compatible with their team's applications and seeks them out before starting large new features or projects. Understands the value of having common shared libraries and not reinventing the wheel by writing unnecessary code.",
                        "2": "Seeks out new libraries and technologies in their application space and how they make their applications better. Implements third party libraries when a high quality option exists and knows when it is valuable to write their own implementation that meets the needs of the company.",
                        "3": "Actively encourages an open-source culture and shared common libraries to reduce the need for rewriting code. Helps the internal community come together and increase knowledge and sharing of code. Has experience with a wide range of third party libraries, SDKs, and frameworks and helps guide others looking for code solutions."
                    },
                    "rating": "",
                    "comment": ""
                },
                "V2": {
                    "category": "Skill",
                    "competency": "Learns new languages or systems and knows when it is appropriate to introduce them.",
                    "examples": {
                        "0": "Has shown limited interest in learning new technology beyond those used by the team.",
                        "1": "Has learned the basics of a new technology or language and written code or implemented it during a team or Hack Week project.",
                        "2": "Demonstrates curiosity and interest in learning new technologies to produce higher quality software. Works with architects to investigate new technologies or products when introduced into the company or the team's applications.",
                        "3": "Actively investigates and reviews new technology such as programming languages or services and tools. Can justify their use within QL in an enterprise setting. Understands the ramifications of introducing a new technology within QL in a mission critical system. Has discovered, researched, and implemented a new technology within QL while satisfying NFRs and company standards for quality and security."
                    },
                    "rating": "",
                    "comment": ""
                },
                "V3": {
                    "category": "Behavior",
                    "competency": "Is actively involved with development communities (e.g. giving talks, helping others).",
                    "examples": {
                        "0": "Does not actively participate in IT communities or contribute knowledge back to other developers.",
                        "1": "Participates in IT communities and actively involved in developing standards and best practices across teams and applications.",
                        "2": "Gives talks during Hack Week and IT communities. Actively looks for ways to share knowledge and improve developer skills. Mentors other engineers in both an unofficial and official capacity.",
                        "3": "Leads one or more IT communities. Works to improve developer relations and recruiting at QL. Mentors other engineers and frequently gives talks both within QL and/or outside of QL at conferences or meetups. Is a domain expert and makes great effort to be available to assist other developers and teams."
                    },
                    "rating": "",
                    "comment": ""
                },
                "V4": {
                    "category": "Behavior",
                    "competency": "Stays current on new and upcoming technologies.",
                    "examples": {
                        "0": "Has shown limited interest in learning new technology beyond that used by the team.",
                        "1": "Learns about new technology in the industry by attending Hack Week experiments, attending conferences, or reading online materials, blogs, and articles.",
                        "2": "Shows active interest and curiosity in new initiatives and services or systems within QL. Stays up to date on new libraries or technology in their domain. Knows about upcoming changes or versions of libraries or frameworks used by the team and shares that knowledge with others.",
                        "3": "Has their finger on the pulse of technology and the industry. Actively stays current on all technologies in their domain - even components they do not directly contribute too. Seen as a 'go-to' person for information and opinions about an upcoming technology and how it may be useful."
                    },
                    "rating": "",
                    "comment": ""
                },
                "V5": {
                    "category": "Behavior",
                    "competency": "Evangelizes and exhibits open-source mindset.",
                    "resources": {
                        "Open Source Culture": "https://www.thoughtworks.com/insights/blog/culture-open-source"
                    },
                    "examples": {
                        "0": "Has no open source awareness or is not involved in internal or external knowledge and code sharing.",
                        "1": "Evangelizes collaboration and open source culture.",
                        "2": "Understands the benefits QL receives from open-source and value of contributing back to the industry. Encourages collaboration through code reviews, knowledge sharing, and open collaboration on software projects.",
                        "3": "Involved in promoting QL open-source efforts - both internally (virtual teams) and externally (has open-sourced high-quality code for QL)."
                    },
                    "rating": "",
                    "comment": ""
                }
            }
        },
        "Architecture": {
            "competencies": {
                "A1": {
                    "category": "Behavior",
                    "competency": "Uses design system thinking when building user interfaces.",
                    "examples": {
                        "0": "Builds features according to spec and in the context of the team's application",
                        "1": "Identifies patterns with similar structures throughout their team's applications and reuses those patterns in different contexts.",
                        "2": "References the design system and recommends using existing patterns when new features unnecessarily deviate. Identifies when a new feature is simply a modified version of an existing pattern.",
                        "3": "Follows design system conventions when building new features. Approaches all new features with the assumption that they might be useful in other applications. Works with architects, designers, and pattern library maintainers to determine when new features should be integrated into the design system."
                    },
                    "rating": "",
                    "comment": ""
                },
                "A2": {
                    "category": "Behavior",
                    "competency": "Addresses current, and prevents future, technical debt.",
                    "resources": {
                        "Technical Debt": "https://en.wikipedia.org/wiki/Technical_debt"
                    },
                    "examples": {
                        "0": "Writes code as quickly as possible without concern for technical debt or has a history of contributing towards it.",
                        "1": "Understands the concept of technical debt and takes an active and consistent interest in addressing it.",
                        "2": "Writes well-thought out code that has minimal negative impact to the long-term technical wellbeing of the project. Evaluates their own code for technical debt and seeks thoughts and advice from others in the form of legitimate code reviews and design sessions. Identifies technical debt within their team's application. Frequently tackles technical debt during iterations.",
                        "3": "Carefully considers the impact of changes on their codebases and the future ability to make changes to it. Brings attention to technical debt and other intangible factors that may slow development - including presenting solutions to address them and prioritizing them. Designs and writes software that is more resilient to technical debt and actively researches for new patterns and behaviors to protect against it. Often has a technical vision for their projects and plans to address internal software technical debt."
                    },
                    "rating": "",
                    "comment": ""
                },
                "A3": {
                    "category": "Skill",
                    "competency": "Can effectively explain architectural decisions to technical and non-technical partners.",
                    "examples": {
                        "0": "Has some difficulty effectively explaining technical solutions to non-engineer team members.",
                        "1": "Can explain their technical decisions and implementations to other engineers and gump software concepts to non-engineer members of their team.",
                        "2": "Effectively describes in-depth software design and architecture designs to both technical and non-technical partners to drive consensus among projects and teams.",
                        "3": "Can tailor messaging, documentation, and presentations to contain the right amount of details for specific target audiences - including engineers and senior leaders. Thoughtfully considers feedback and input from all partners and collaborates with others to come to the best solution for the company."
                    },
                    "rating": "",
                    "comment": ""
                },
                "A4": {
                    "category": "Behavior",
                    "competency": "Writes effective documentation both in and outside of code (e.g. comments, changelogs, architecture, system design, gliffies, pattern libraries).",
                    "examples": {
                        "0": "Rarely writes documentation or only when prompted.",
                        "1": "Consistently writes good documentation in code such as comments.",
                        "2": "Writes technical and non-technical documentation both in code and outside of code such as project decisions and architecture. Keeps documentation up-to-date to ensure correctness and clarity. Documents their applications' components in a component/pattern library.",
                        "3": "Writes clear, thorough, and useful documentation in every facet of software development. Comments code consistently and clearly. Creates diagrams when they might help bring clarity to an idea. Authors simple upgrade and usage guidelines for users of their applications and libraries. Contributes to shared pattern libraries. Encourages others to document their software and processes to increase shared knowledge."
                    },
                    "rating": "",
                    "comment": ""
                },
                "A5": {
                    "category": "Knowledge",
                    "competency": "Has expert knowledge in a specialized domain (e.g. CMS, design systems, release management, interaction design).",
                    "references": {
                        "Domain Expertise": "https://en.wikipedia.org/wiki/Subject-matter_expert"
                    },
                    "examples": {
                        "0": "Has shown limited interest in diving deep and becoming an expert in a specialized technology or discipline.",
                        "1": "Shows an active and consistent curiosity in a specialized domain or area of expertise relevant to the company beyond their primary language. Actively looks for opportunities to be involved in company projects and initiatives in those domains.",
                        "2": "Actively pursues their interest as a specialist in one or more domains. Shows consistent progress and growth with their experience and knowledge.",
                        "3": "Has deep knowledge in a specialized domain. Has experience with designing, architecting, and building software in that domain. Recognized in the company as a domain expert."
                    },
                    "rating": "",
                    "comment": ""
                },
                "A6": {
                    "category": "Behavior",
                    "competency": "Promotes design consistency across applications.",
                    "examples": {
                        "0": "Implements designs according to spec without considering if the designs align with existing styles or conventions.",
                        "1": "Carefully reviews all new features to ensures their team's applications follow the design system conventions for interaction and style.",
                        "2": "Regularly shares new features of their team's applications with the UI community and follows what other UI Engineers are working on to encourage consistent interaction and design.",
                        "3": "Works with the UX team to ensure new features follow agreed upon interaction and design conventions. Helps set and maintain standards for interaction and design. Is seen as an expert in the standards and conventions of the design system and other UI Engineers come to them for guidance on how to implement new designs in a consistent way."
                    },
                    "rating": "",
                    "comment": ""
                },
                "A7": {
                    "category": "Behavior",
                    "competency": "Builds extensible and composable systems.",
                    "examples": {
                        "0": "Needs guidance to avoid adding technical debt or over-engineered components.",
                        "1": "Contributes to extensible codebases and considers coupling, implementation flexibility when writing software.",
                        "2": "Significant contributor to a composable software system and writes decoupled code to avoid service and vendor lock-in. Thinks ahead and considers long-term vision of their applications to minimize technical debt and increase velocity of delivery to stakeholders.",
                        "3": "Leads development for one or more large-scale extensible and modular systems. Drives best practices and engagement within their developer community for building better systems within the enterprise."
                    },
                    "rating": "",
                    "comment": ""
                }
            }
        }
    }
}
