{
    "_comment": "https://confluence/display/TRAC/Software+Development+and+Architecture+Skills+V2",
    "_comment.2": "http://git/SKluck/trac/",

    "type": "Software Engineering",
    "version": "2.0.0",

    "id": "",
    "name": "",
    "updated": "",

    "sections": {
        "Quality and Health": {
            "competencies": {
                "Q1": {
                    "category": "Knowledge",
                    "competency": "Understands potential attack vectors within applications.",
                    "examples": {
                        "0": "Has heard of a few common attacks such as XSS and SQL Injection but may not understand how they work.",
                        "1": "Is aware of some common attacks from OWASP such as XSS, CSRF, and SQL injection and how they may be used to take advantage of an application.",
                        "2": "Familiar with the entire OWASP Top 10.",
                        "3": "Has an in-depth understanding of most types of attack vectors and how they affect and exploit their team's applications. Knows how to avoid unsafe programming patterns and can guide others in best practices."
                    },
                    "rating": "",
                    "comment:": ""
                },
                "Q2": {
                    "category": "Skill",
                    "competency": "Writes code that protects against potential attack vectors.",
                    "examples": {
                        "0": "Does not consider security when writing code.",
                        "1": "Can use a library to protect against common attacks from OWASP such as XSS, CSRF, and SQL injection.",
                        "2": "Writes code to defend against attacks when not provided by a library - and understands the security guarantees frameworks do and do not provide.",
                        "3": "Can write robust, and well-tested code to protect against many types of attacks for all layers of their team's applications. Makes security vulnerabilities a priority and proactively considers them during planning."
                    },
                    "rating": "",
                    "comment:": ""
                },
                "Q3": {
                    "category": "Behavior",
                    "competency": "Analyses the team's applications for vulnerabilities.",
                    "examples": {
                        "0": "Rarely analyses the team's applications for vulnerabilities or does not know what vulnerabilities to check for.",
                        "1": "Reviews new code written by themselves or others and evaluates how it may be vulnerable to attacks from OWASP.",
                        "2": "Reviews both new code and old code for vulnerabilities and also actively refactors old code to make it more secure and resistant to attacks. Responds to security issues quickly.",
                        "3": "Consistently analyzes team code for vulnerabilities, actively writes mitigations against common vulnerabilities, and quickly implements fixes or updates for security issues (such as CVE) when found. This person also actively reviews CVE notices for how they may affect QL and team applications."
                    },
                    "rating": "",
                    "comment:": ""
                },
                "Q4": {
                    "category": "Skill",
                    "competency": "Understands the monitoring metrics and tools used by the company and how to integrate with them (e.g. logs, usage, system, security).",
                    "examples": {
                        "0": "May be familiar with one or two services but does not have a complete picture of all monitoring services used by applications their team supports.",
                        "1": "Is aware of core services, their purpose, and which tools to integrate with, but needs guidance to integrate with their application.",
                        "2": "Can do complete setup for an application to connect to core services - either directly or through SDKs provided by the company.",
                        "3": "Contributes to libraries and SDKs for core services and participates in setting standards, including evaluation of those tools and systems. (Splunk, App Dynamics, SCOM, Zabbix, Acunetix, etc) "
                    },
                    "rating": "",
                    "comment:": ""
                },
                "Q5": {
                    "category": "Skill",
                    "competency": "Profiles an application to identify and implement performance enhancements.",

                    "examples": {
                        "0": "Does not know how to test application performance or ignores performance metrics when writing code.",
                        "1": "Can connect a profiler to their application and understands its output to identify inefficient codeblocks.",
                        "2": "Takes an active and consistent interest in profiling and monitoring and often uses tools to identify and improve expensive code paths.",
                        "3": "Knows how to measure performance and bottlenecks at all tiers of their application and frequently optimizes application code to be more efficient. Considers performance tuning part of the shipping process."
                    },
                    "rating": "",
                    "comment:": ""
                },
                "Q6": {
                    "category": "Knowledge",
                    "competency": "Understands different metrics of application health and performance.",

                    "examples": {
                        "0": "Has limited familiarity with application health, error handling, and other metrics of quality.",
                        "1": "Understands at a high level the signals of application health and performance and the factors that impact them.",
                        "2": "Knows what should be optimized within the team's applications and when optimization is less necessary due to diminishing returns.",
                        "3": "Understands the most important metrics for measuring application health and performance such as response time, throughput, error rates, logging and how to respond appropriately at various thresholds. Does what it takes to ensure a high-performance application (proactively and reactively)."
                    },
                    "rating": "",
                    "comment:": ""
                },
                "Q7": {
                    "category": "Behavior",
                    "competency": "Follows established development standards (security, performance, testing, coding style).",

                    "examples": {
                        "0": "Is unaware of team or company standards or often ignores them.",
                        "1": "Is aware of company and community standards for development languages and processes. May ignore standards on occasion to ship features sooner for business partners and demands.",
                        "2": "Follows company standards and understands the importance of adhering to them. Actively seeks out senior developers if unsure on best practices and when no clear company guidelines are available.",
                        "3": "Sets an example for others in following standards and doing the right thing. Addresses NFRs and actively works to ensure compliance with company standards. Works hard to adhere to standards without cutting corners to ship sooner."
                    },
                    "rating": "",
                    "comment:": ""
                },
                "Q8": {
                    "category": "Behavior",
                    "competency": "Analyzes the team's applications and fixes errors.",

                    "examples": {
                        "0": "Often needs assistance from other engineers to fix bugs or find effective solutions.",
                        "1": "Fixes simple bugs - usually from the backlog and identified by QA or other engineers.",
                        "2": "Makes fixing bugs a priority and actively works on drawing attention to them during planning. Can quickly identify and fix bugs even in code written by others.",
                        "3": "Proactively writes defensive code. Can quickly spot bugs or problematic code during code reviews. Has a deep understanding of the team's codebases and understands the importance of fixing bugs and minimizing Known Shippables."
                    },
                    "rating": "",
                    "comment:": ""
                },
                "Q9": {
                    "category": "Skill",
                    "competency": "Identifies, explains, and resolves software issues.",

                    "examples": {
                        "0": "Can assist with troubleshooting issues but may have difficulty finding their exact causes and requires supervision from a more experienced team member.",
                        "1": "Can troubleshoot and fix simple issues found by QA. Often needs help to identify an issue but can fix it under guidance from a more senior developer.",
                        "2": "Quickly resolves and fixes issues of all types within the team's applications. Works well with QA to explain bugs and help troubleshoot as well as quickly promoting changes back to be able to be tested. Completes features reliably and needs minimal back and forth with QA before their tasks are accepted and certified.",
                        "3": "Can quickly troubleshoot issues, find bugs and their solutions. Efficiently identifies issues in pressure situations such as outages. The \"Goto person\" when other developers cannot isolate and identify issues."
                    },
                    "rating": "",
                    "comment:": ""
                },
                "Q10": {
                    "category": "Skill",
                    "competency": "Writes code that fails gracefully and handles error conditions (e.g. service failures, logging).",

                    "examples": {
                        "0": "Has limited familiarity with how to best handle edge cases or error conditions.",
                        "1": "Can write code that handles errors and exceptions from dependent systems or libraries. Also appropriately surfaces errors to the user with errors or exceptions in severe scenarios that cannot be recovered. Knows how to avoid leaking sensitive code or details from users in these scenarios.",
                        "2": "Can write robust code that defends against common error scenarios such as bad responses from services and log the appropriate information to allow quick and efficient troubleshooting. Understands the severity of different types of errors and when they should be suppressed or surfaced to the user.",
                        "3": "Has deep knowledge and understanding of how error handling works in all aspects of the team's applications. Has written error handlers and knows how to safely log errors for monitoring. Writes code to protect against all situations - including rare failures or edge cases. Can write code that is defensive and fails gracefully for client or user experience."
                    },
                    "rating": "",
                    "comment:": ""
                }
            }
        },
        "Programming Concepts": {
            "competencies": {
                "C1": {
                    "category": "Skill",
                    "competency": "Writes maintainable and modular code.",
                    "examples": {
                        "0": "Can write code and complete issues with oversight from more experienced engineers.",
                        "1": "Implements quickly and correctly. Demonstrates regular, incremental, and visible progress. Avoids coupling and over-architecting.",
                        "2": "Can be trusted to write small systems or libraries in a well-architected and modular manner without oversight. Comments their code well and writes software with flexibility and users in mind.",
                        "3": "Has written large-scale applications or libraries while maintaining solid software architecture using best practices. Writes thoughtful code that takes users into account and considers readability and comprehension a priority (principle of least surprise)."
                    },
                    "rating": "",
                    "comment:": ""
                },
                "C2": {
                    "category": "Knowledge",
                    "competency": "Understands common development principles (e.g. DRY, KISS, YAGNI).",
                    "examples": {
                        "0": "Has heard of common software engineering principles and practices, but may lack understanding why they are important.",
                        "1": "Is aware of a few basic software development philosophies such as YAGNI, KISS and how they affect software design and development.",
                        "2": "Has a complete understanding of several software development philosophies from Wikipedia: Software Development Philosophies, and has experience using them in practice - including when ignoring them caused issues or made development more difficult.",
                        "3": "Understands many development principles and philosophies from Wikipedia: Software Development Philosophies, how they affect the process of software development and software engineering and the quality of software - including when they are important to follow and when there may be reason to ignore or bypass them."
                    },
                    "rating": "",
                    "comment:": ""
                },
                "C3": {
                    "category": "Knowledge",
                    "competency": "Understands object-oriented programming paradigms and patterns.",
                    "examples": {
                        "0": "Knows what OOP is and the differences between OOP and other paradigms such as functional or procedural programming.",
                        "1": "Understands and is familiar with basic OOP fundamentals such as objects, inheritance, data modeling and relationships. Knows all SOLID principles.",
                        "2": "Understands OOP and more advanced topics such as domain driven design, composition, and the law of demeter. Familiar with SOLID, GRASP, and many other design patterns such as factories, repositories, facades, decorators, etc and has used them when developing.",
                        "3": "Has in depth knowledge of most OOP design patterns and has built or managed large-scale software using them."
                    },
                    "rating": "",
                    "comment:": ""
                },
                "C4": {
                    "category": "Knowledge",
                    "competency": "Understands functional programming paradigms and patterns.",
                    "examples": {
                        "0": "Knows what FP is and the differences between FP and other paradigms such as object-oriented or procedural programming.",
                        "1": "Understands FP basics such as first-class functions, closures, immutability, and statelessness.",
                        "2": "Understands more advanced FP topics such as monads, currying, accumulators, pipelines, fold/reduce, map, etc and has used them when developing.",
                        "3": "Has deep knowledge of most functional programming design patterns and has built or managed large-scale software using them."
                    },
                    "rating": "",
                    "comment:": ""
                },
                "C5": {
                    "category": "Knowledge",
                    "competency": "Understands different methods of encryption (e.g. symmetric, asymmetric, authenticated).",
                    "examples": {
                        "0": "Has basic understanding of common encryption methods, but may be unfamiliar with what data in QL we encrypt and in which scenarios.",
                        "1": "Understands at a high level the different methods of encryption and how we use them at QL.",
                        "2": "Understands the value of encryption and the importance of the various methods including symmetric, asymmetric, and hashing including when they should be used and what type of data they should be used with.",
                        "3": "Has in-depth familiarity with various implementations of crypto and using them in a production environment. Has great knowledge of most crypto algorithms including how to use them and their costs."
                    },
                    "rating": "",
                    "comment:": ""
                }
            }
        },
        "Tooling": {
            "competencies": {
                "T1": {
                    "category": "Knowledge",
                    "competency": "Understands the various types of testing and their importance (e.g. unit, functional, acceptance, user).",
                    "examples": {
                        "0": "Familiar with some form of testing, but may not know the differences between various testing methods.",
                        "1": "Understands the differences between unit and integration testing and when they are used in the team's applications.",
                        "2": "Understands the value of multiple types of test suites for an application or software and the different scenarios they help protect against. Knows how to write most types of tests for their team's projects.",
                        "3": "Has in-depth knowledge on the various types of testing and the value they add. Understands all types of testing and what is needed to make automated test suites robust enough to cover nearly every scenario and enable continuous deployment."
                    },
                    "rating": "",
                    "comment:": ""
                },
                "T2": {
                    "category": "Behavior",
                    "competency": "Writes comprehensive tests for all code.",
                    "examples": {
                        "0": "Can write unit tests, but needs encouragement or guidance.",
                        "1": "Proactively writes unit tests or acceptance tests for their projects.",
                        "2": "Has used both TDD and BDD and has significant experience with at least one of them. Helps push the bar higher on code coverage and other testing metrics for projects they are involved in.",
                        "3": "A champion of automated testing. Has experience writing all types of tests including unit tests and acceptance or integration tests. A proponent of high code coverage (>90%) and enforces that standard on their projects."
                    },
                    "rating": "",
                    "comment:": ""
                },
                "T3": {
                    "category": "Skill",
                    "competency": "Performs VCS management such as committing, merging, handling conflicts.",
                    "examples": {
                        "0": "Understands version control and its importance in software development. Has limited familiarity with the VCS used by the team.",
                        "1": "Can use team's version control system to perform simple functions such as commits, branches and merging. May be reliant on a GUI or non-console interface.",
                        "2": "Can perform complex functions such as rebasing, bisect, searching through vcs history, check-in locks, stashing, and partial staging. Knows the dangers of some commands and how to avoid losing data.",
                        "3": "Understands the meaning behind VCS commands and how they work. Comfortable with console or CLI. Can handle conflict resolution for any situation and recovering data when something goes wrong. Often helps others when they have a vcs-related issue."
                    },
                    "rating": "",
                    "comment:": ""
                },
                "T4": {
                    "category": "Knowledge",
                    "competency": "Understands best practices for multi-person or team workflows and branch/merging strategies.",
                    "examples": {
                        "0": "May be aware of branching strategies when working within a team, but lacks understanding or experience with release management processes for promoting code to deployment environments.",
                        "1": "Is familiar with development and branching workflows used at QL and knows what is required of them as a developer. Understands the concepts of continuous integration, continuous deployment, and continuous delivery.",
                        "2": "Has an in-depth understanding of multiple development workflows such as git flow, trunk-based development, branch-based development and why some workflows may work better for certain situations. Involved in defining the workflow and improving the development and vcs integration process for their projects and team.",
                        "3": "Has experience with multiple workflows and how they work with different team sizes. Understands the trade-offs with different development strategies and how to balance between the needs of development teams and business partners for change management. Considered an expert in this domain and helps many teams across the company improve their processes and learn optimal development and vcs processes."
                    },
                    "rating": "",
                    "comment:": ""
                },
                "T5": {
                    "category": "Knowledge",
                    "competency": "Understands requirements and process for compiling and building applications in their domain.",
                    "examples": {
                        "0": "Can compile and run applications built by their team in a development environment but lacks understanding of how the process works.",
                        "1": "Understands the individual commands, scripts and processes for building their applications - both for development and in a build environment for release.",
                        "2": "Has an in-depth understanding of the processes run in order to build and compile their team's projects including system requirements and dependencies. Has experience with writing scripts for automating the build process and is keenly aware of the differences between compiling on a dev machine and for deployment. Aware of specific QL processes or caveats for our enterprise environment including consideration of our staging environments and network conditions. Can quickly debug issues that arise anywhere in the toolchain.",
                        "3": "Has extensive knowledge of how to build and compile projects across the enterprise for a wide range of project types - including awareness of both unix and windows-based projects. Actively works on process improvement for simpler, faster, and more reproducible builds. An expert in the release management process - often consults and assists other teams and developers with troubleshooting."
                    },
                    "rating": "",
                    "comment:": ""
                },
                "T6": {
                    "category": "Knowledge",
                    "competency": "Understands requirements and process for deploying applications in their domain.",
                    "examples": {
                        "0": "Can deploy the team's applications using QL tools and systems through a GUI or app but lacks understanding of how the process works.",
                        "1": "Understands the individual commands, scripts or processes for deploying their applications.",
                        "2": "Has an in-depth understanding of the processes run in order to deploy their team's projects to multiple environments - including both on-premise and cloud. Aware of specific QL processes or caveats for our enterprise environment including consideration of our staging environments and network conditions. Can quickly debug issues that arise anywhere in the process.",
                        "3": "Has extensive knowledge of how to deploy projects across the enterprise for a wide range of project types - including awareness of both unix and windows-based projects. Actively works on process improvement for simpler, faster, and more consistent deployments. An expert in the release management process - often consults and assists other teams and developers with troubleshooting."
                    },
                    "rating": "",
                    "comment:": ""
                },
                "T7": {
                    "category": "Knowledge",
                    "competency": "Understands the release management pipeline and how to set up for applications in their domain.",
                    "examples": {
                        "0": "Has basic familiarity with the change management tools used by the team but may not know the processes and protocols to follow.",
                        "1": "Understands how to use the tools, systems and platforms used by their team including project and change management systems and the required processes QL has defined for promoting code to production.",
                        "2": "Knows the entire software development process and SDLC from task intake to production deployment including requirements gathering, testing and promotion through environments. Helps define the standards and processes that the team follows for release management.",
                        "3": "Often helps define best practices and standards across the company for release management. A leading voice on the team with a focus on the shipping process - taking in requirements and delivering high quality code to clients as quickly and safely as possible. An expert of release engineering for their team and others."
                    },
                    "rating": "",
                    "comment:": ""
                },
                "T8": {
                    "category": "Knowledge",
                    "competency": "Understands the implications of changing or updating dependencies.",
                    "examples": {
                        "0": "May have basic familiarity with one or two common package managers (can install or update libraries).",
                        "1": "Familiar with package management and how to import both internal and external third party libraries.",
                        "2": "Understands the implications of using third party code and evaluates when to use them based on security, reliability, and community support. Knows how to use native package managers for their team's applications such as nuget, composer, npm, hex, and others. Has knowledge of vendoring, locked dependencies or shrinkwrapping, and verifying trust such as signing code and authorship.",
                        "3": "Has in-depth knowledge and experience with package managers and dependency management for multiple application ecosystems or languages. Understands the impact of relying on public systems or services for dependency management and what can be done to reduce risk of downtime for QL. Understands software licensing - both open source and proprietary - and their ramifications for software use."
                    },
                    "rating": "",
                    "comment:": ""
                }
            }
        }
    }
}
